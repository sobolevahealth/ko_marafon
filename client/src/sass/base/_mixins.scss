@import './_variables.scss';

@mixin komarafon-media-min-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-min-width' sass map";
  }
}

@mixin komarafon-media-max-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-max-width' sass map";
  }
}

@mixin komarafon-media-min-max-width($breakpoint, $secondBreakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if map-has-key($breakpoints, $secondBreakpoint) {
      @media screen and (min-width: #{map-get($breakpoints, $breakpoint)}) and (max-width: #{map-get($breakpoints, $secondBreakpoint)}) {
        @content;
      }
    } @else {
      @warn "ERROR: property `#{$secondBreakpoint}` not found in 'skylux-media-min-max-device-width' sass map";
    }
  } @else {
    @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-max-min-width' sass map";
  }
}

@mixin komarafon-media-max-device-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (max-device-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-max-width' sass map";
  }
}

@mixin komarafon-media-min-max-device-width($breakpoint, $secondBreakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if map-has-key($breakpoints, $secondBreakpoint) {
      @media screen and (min-device-width: #{map-get($breakpoints, $breakpoint)}) and (max-device-width: #{map-get($breakpoints, $secondBreakpoint)}) {
        @content;
      }
    } @else {
      @warn "ERROR: property `#{$secondBreakpoint}` not found in 'skylux-media-min-max-device-width' sass map";
    }
  } @else {
    @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-max-min-width' sass map";
  }
}

@mixin komarafon-media-orientation-min-max-device-width($orientation, $breakpoint, $secondBreakpoint) {
  @if map-has-key($screenOrientations, $orientation) {
    @if map-has-key($breakpoints, $breakpoint) {
      @if map-has-key($breakpoints, $secondBreakpoint) {
        @media screen and (orientation: #{map-get($screenOrientations, $orientation)}) and (min-device-width: #{map-get($breakpoints, $breakpoint)}) and (max-device-width: #{map-get($breakpoints, $secondBreakpoint)}) {
          @content;
        }
      } @else {
        @warn "ERROR: property `#{$secondBreakpoint}` not found in 'skylux-media-orientation-min-max-device-width' sass map";
      }
    } @else {
      @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-orientation-min-max-device-width' sass map";
    }
  } @else {
    @warn "ERROR: property `#{$orientation}` not found in 'skylux-media-orientation-min-max-device-width' sass map";
  }
}

@mixin komarafon-media-min-width-max-height($breakpoint, $secondBreakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if map-has-key($breakpoints, $secondBreakpoint) {
      @media screen and (min-width: #{map-get($breakpoints, $breakpoint)}) and (max-height: #{map-get($breakpoints, $secondBreakpoint)}) {
        @content;
      }
    } @else {
      @warn "ERROR: property `#{$secondBreakpoint}` not found in 'skylux-media-min-max-device-width' sass map";
    }
  } @else {
    @warn "ERROR: property `#{$breakpoint}` not found in 'skylux-media-max-min-width' sass map";
  }
}

@mixin komarafon-media-orientation($orientation) {
  @if map-has-key($screenOrientations, $orientation) {
    @media screen and (orientation: #{map-get($screenOrientations, $orientation)}) {
      @content;
    }
  } @else {
    @warn "ERROR: property `#{$orientation}` not found in 'skylux-media-orientation' sass map";
  }
}

//=== Shortcuts

@mixin ease($ratio: 1){
  transition-duration: 200ms * $ratio;
  transition-timing-function: $tfStandard;
}

@mixin unstyleUl {
  display: block;
  padding: 0;
  margin: 0;
  list-style: none;
}

@mixin flexCenter{
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin closeButton {
  background-color: transparent;
  border: none;
  position: absolute;
  top: 10px;
  right: 10px;
  width: 20px;
  height: 20px;
  cursor: pointer;
  z-index: 1;

  &:after,
  &:before {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 1px;
    height: 20px;
    //background: $callBackClose;
    content: '';
    transform: translate(-50%, -50%) rotate(45deg);
    @include ease(0.5);
  }

  &:after {
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  &:hover,
  &:focus {
    &:after,
    &:before {
      background: $black;
    }
  }
}
